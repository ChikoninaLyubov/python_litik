# Формат: Объясняет преподаватель
# Задача: предложить улучшения кода для уже решённых задач:
# С помощью использования **лямбд, filter, map, zip, enumerate, list comprehension
# В этом случае можно пропустить совсем тривиальные (т.е. задачу 1 или 2 тут точно решать не имеет смысла) -
#  исходите из уровня группы и студента.


# 1. Задайте список из нескольких чисел. Напишите программу, которая найдёт сумму элементов списка, стоящих на нечётной позиции.
# *Пример:*
# - [2, 3, 5, 9, 3] -> на нечётных позициях элементы 3 и 9, ответ: 12


# spisok1 = [1, 2, 3, 4, 5, 6, 7, 1, 10]
# proverka = [2, 3, 5, 9, 3]
# sum = 0
# for x in (list(filter(lambda x: True if spisok1.index(x) %
#                       2 == 0 else False, spisok1))):
#     sum += x
# # sum = + x for x in spisok1 if spisok1.index(x) % 2 == 0
# print(sum)

#2. Напишите программу, которая принимает на вход число N и выдает набор произведений чисел от 1 до N.
# Пример:
# - пусть N = 4, тогда [ 1, 2, 6, 24 ] (1, 1*2, 1*2*3, 1*2*3*4)

def fill(a):
    if a == 1:
        return 1
    else:
        return a * fill(a-1)


vvodnoe2 = int(input("Число для второй задачи: "))

b = [fill(x) for x in range(1, vvodnoe2+1)]         

print(b)

